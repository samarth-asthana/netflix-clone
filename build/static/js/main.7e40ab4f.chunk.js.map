{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","HomeScreen.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionNavbar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e40ab4f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './Nav.css'\n\nfunction Nav() {\n  const [show, handleShow] = useState(false)\n  const transitionNavbar = () => {\n    if (window.scrollY > 100) {\n      handleShow(true)\n    } else {\n      handleShow(false)\n    }\n  }\n  useEffect(() => {\n    window.addEventListener('scroll', transitionNavbar)\n    return () => window.removeEventListener('scroll', transitionNavbar)\n  }, [])\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n      <div className=\"nav__contents\">\n        <img\n          className=\"nav__logo\"\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"Netflix LOGO\"\n        ></img>\n        <img\n          className=\"nav__avatar\"\n          src=\"https://iconape.com/wp-content/png_logo_vector/avatar-4.png\"\n          alt=\"Avatar\"\n        ></img>\n      </div>\n    </div>\n  )\n}\n\nexport default Nav\n","import axios from 'axios'\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n})\nexport default instance\n","const API_KEY = 'd3c3622bb33849c9b0159b3db3401612'\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&lwith_network=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\nexport default requests\n","import React, { useState, useEffect } from 'react'\nimport './Banner.css'\nimport axios from './axios'\nimport requests from './Requests'\nfunction Banner() {\n  const [movie, setMovie] = useState([])\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals)\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      )\n      return request\n    }\n    fetchData()\n  }, [])\n  console.log(movie)\n  function truncate(string, n) {\n    return string?.length > n ? string.substr(0, n - 1) + '...' : string\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: 'cover',\n        backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\n        backgroundPosition: 'center center',\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport './Row.css'\nimport axios from './axios'\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([])\n  const base_url = 'https://image.tmdb.org/t/p/original/'\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl)\n      setMovies(request.data.results)\n    }\n    fetchData()\n  }, [fetchUrl])\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n                key={movie.id}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport './HomeScreen.css'\nimport Nav from './Nav'\nimport Banner from './Banner'\nimport Row from './Row'\nimport requests from './Requests'\nfunction HomeScreen() {\n  return (\n    <div className=\"homeScreen\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  )\n}\n\nexport default HomeScreen\n","import React from 'react'\r\nimport './App.css'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport HomeScreen from './HomeScreen.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeScreen />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport counterReducer from '../features/counterSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}